{
  "$ref": "#/$defs/Config",
  "$defs": {
    "Config": {
      "title": "Config",
      "description": "Configuration for langgraph-cli.",
      "type": "object",
      "required": [],
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "python_version": {
              "type": "string",
              "description": "Python version to use in 'major.minor' format (e.g., '3.11'). Minimum supported version is '3.11'.",
              "enum": [
                "3.11",
                "3.12"
              ]
            },
            "pip_config_file": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Path to a pip configuration file. Only applicable for Python projects."
            },
            "auth": {
              "anyOf": [
                {
                  "$ref": "#/$defs/AuthConfig"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Configuration for authentication."
            },
            "dependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Python dependencies to install. Can include PyPI package names or local paths.\n\n1. \".\" - which will look for local Python packages\n2. \"./local_package\" - which will look for pyproject.toml, setup.py or requirements.txt in the app directory\n3. A package name - which will be installed from PyPI\n"
            },
            "dockerfile_lines": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Additional lines to add to the Dockerfile."
            },
            "env": {
              "anyOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ],
              "description": "Environment variables to set.\n\nIf a dictionary is provided, the keys are environment variable names\nand the values are the corresponding environment variable values.\n\nIf a string is provided, it is interpreted as a path to a file containing\nenvironment variables in the format KEY=VALUE, with one environment variable\nper line.\n"
            },
            "graphs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "Mapping of graph names to their definitions. Each definition should be in the format 'path/to/file.py:attribute_name'."
            },
            "http": {
              "anyOf": [
                {
                  "$ref": "#/$defs/HttpConfig"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Configuration for HTTP server."
            },
            "store": {
              "anyOf": [
                {
                  "$ref": "#/$defs/StoreConfig"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Configuration for the long-term memory store that comes built-in to your deployment.\n\n"
            }
          },
          "required": [
            "dependencies",
            "graphs"
          ]
        },
        {
          "type": "object",
          "properties": {
            "node_version": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "20"
                  ]
                },
                {
                  "type": "null"
                }
              ],
              "description": "Node.js version to use as major version only (e.g., '20'). Minimum supported version is '20'."
            },
            "auth": {
              "anyOf": [
                {
                  "$ref": "#/$defs/AuthConfig"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Configuration for authentication."
            },
            "dependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Python dependencies to install. Can include PyPI package names or local paths.\n\n1. \".\" - which will look for local Python packages\n2. \"./local_package\" - which will look for pyproject.toml, setup.py or requirements.txt in the app directory\n3. A package name - which will be installed from PyPI\n"
            },
            "dockerfile_lines": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Additional lines to add to the Dockerfile."
            },
            "env": {
              "anyOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ],
              "description": "Environment variables to set.\n\nIf a dictionary is provided, the keys are environment variable names\nand the values are the corresponding environment variable values.\n\nIf a string is provided, it is interpreted as a path to a file containing\nenvironment variables in the format KEY=VALUE, with one environment variable\nper line.\n"
            },
            "graphs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "Mapping of graph names to their definitions. Each definition should be in the format 'path/to/file.py:attribute_name'."
            },
            "http": {
              "anyOf": [
                {
                  "$ref": "#/$defs/HttpConfig"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Configuration for HTTP server."
            },
            "store": {
              "anyOf": [
                {
                  "$ref": "#/$defs/StoreConfig"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Configuration for the long-term memory store that comes built-in to your deployment.\n\n"
            }
          },
          "required": [
            "node_version",
            "graphs"
          ]
        }
      ]
    },
    "AuthConfig": {
      "title": "AuthConfig",
      "description": "Configuration for custom authentication.",
      "type": "object",
      "properties": {
        "disable_studio_auth": {
          "type": "boolean",
          "description": "Whether to disable authentication when connecting from the LangSmith Studio. Set to true to allow LangSmith Studio to connect without authentication."
        },
        "openapi": {
          "$ref": "#/$defs/SecurityConfig",
          "description": "The schema to use for updating the openapi spec.\n"
        },
        "path": {
          "type": "string",
          "description": "Path to the authentication function in a Python file. Should be in the format 'path/to/file.py:auth_function'."
        }
      },
      "required": []
    },
    "SecurityConfig": {
      "title": "SecurityConfig",
      "description": "Configuration for managing the security section of your deployment's  openapi specification.",
      "type": "object",
      "properties": {
        "paths": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "Path-specific security requirements for OpenAPI specification."
        },
        "security": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Security requirements for OpenAPI specification."
        },
        "securitySchemes": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "description": "Security schemes for OpenAPI specification."
        }
      },
      "required": []
    },
    "HttpConfig": {
      "title": "HttpConfig",
      "description": "Configuration for the HTTP server that comes built-in to your deployment.",
      "type": "object",
      "properties": {
        "app": {
          "type": "string",
          "description": "Import path for a custom Starlette app to mount. Should be in the format 'path/to/file.py:app_attribute'."
        },
        "cors": {
          "anyOf": [
            {
              "$ref": "#/$defs/CorsConfig"
            },
            {
              "type": "null"
            }
          ],
          "description": "Cross-Origin Resource Sharing (CORS) configuration."
        },
        "disable_assistants": {
          "type": "boolean",
          "description": "Disable /assistants routes."
        },
        "disable_meta": {
          "type": "boolean",
          "description": "Disable /ok, /info, /metrics, and /docs routes."
        },
        "disable_runs": {
          "type": "boolean",
          "description": "Disable /runs routes."
        },
        "disable_store": {
          "type": "boolean",
          "description": "Disable /store routes."
        },
        "disable_threads": {
          "type": "boolean",
          "description": "Disable /threads routes."
        }
      },
      "required": []
    },
    "CorsConfig": {
      "title": "CorsConfig",
      "description": "Configure how CORS will be treated in your deployment.",
      "type": "object",
      "properties": {
        "allow_credentials": {
          "type": "boolean",
          "description": "Whether to allow credentials (cookies, authorization headers, etc) to be included in cross-origin requests."
        },
        "allow_headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of HTTP headers that are allowed for cross-origin requests."
        },
        "allow_methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of HTTP methods that are allowed for cross-origin requests."
        },
        "allow_origin_regex": {
          "type": "string",
          "description": "Regex pattern for origins that are allowed to make cross-origin requests."
        },
        "allow_origins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of origins that are allowed to make cross-origin requests."
        },
        "expose_headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of HTTP headers that browsers are allowed to access."
        },
        "max_age": {
          "type": "integer",
          "description": "Maximum number of seconds the results of a preflight request can be cached."
        }
      },
      "required": []
    },
    "StoreConfig": {
      "title": "StoreConfig",
      "description": "Configuration for the long-term memory store that comes built-in to your deployment.\n\nContains configuration for adding semantic search to the BaseStore, including:\n- index: Configuration for semantic search indexing with fields for embed, dims, and fields",
      "type": "object",
      "properties": {
        "index": {
          "anyOf": [
            {
              "$ref": "#/$defs/IndexConfig"
            },
            {
              "type": "null"
            }
          ],
          "description": "Configuration for vector embeddings in store. Defines how documents are indexed and retrieved using vector embeddings."
        }
      },
      "required": []
    },
    "IndexConfig": {
      "title": "IndexConfig",
      "description": "Configuration for indexing documents for semantic search in the store.",
      "type": "object",
      "properties": {
        "dims": {
          "type": "integer",
          "description": "Number of dimensions in the embedding vectors.\n\n"
        },
        "embed": {
          "type": "string",
          "description": "Model identifier to generate embeddings from text or path to model or function.\n"
        },
        "fields": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "description": "Fields to extract text from for embedding generation.\n\nDefaults to the root [\"$\"], which embeds the json object as a whole.\n"
        }
      },
      "required": []
    }
  },
  "title": "LangGraph CLI Configuration",
  "description": "Configuration schema for langgraph-cli",
  "version": "v0"
}